#include "err_def.hpp"
using namespace dpm;

map<ERR_ENUM, string> ErrorsDef::_ErrorMap = {
		EMD(WARN_PM_MULTI_INSTANCE_OVERFLOW),
		EMD(WARN_PM_KILL_MANY_SKIP),

		EMD(ERR_CLI_INSUFFICIENT_ARGS),
		EMD(ERR_CLI_INVALID_COMMAND_USAGE),
		EMD(ERR_CLI_INVALID_COMMAND),
		EMD(ERR_CLI_INVALID_OPTION),
		EMD(ERR_CLI_INVALID_ARG),
		EMD(ERR_CLI_INVALID_ATTR_LOG),
		EMD(ERR_CLI_INVALID_ATTR_POLL),
		EMD(ERR_CLI_INVALID_ATTR_INVALID),

		EMD(ERR_SOCKET_CREATION_FAILED),
		EMD(ERR_SOCKET_SERVER_CONNECTION_FAILED),
		EMD(ERR_SOCKET_SEND_FAILED),
		EMD(ERR_SOCKET_RCV_FAILED),
		EMD(ERR_SOCKET_SEND_FILE_FAILED),
		EMD(ERR_SOCKET_RCV_FILE_FAILED),
		EMD(ERR_SOCKET_INVALID_IP),
		EMD(ERR_SOCKET_INVALID_PORT),
		EMD(ERR_SOCKET_BIND_FAILED),
		EMD(ERR_SOCKET_LISTEN_FAILED),

		EMD(ERR_PM_BIN_NOT_FOUND),
		EMD(ERR_PM_EXEC_FAILED),
		EMD(ERR_PM_FORK_FAILED),
		EMD(ERR_PM_SYSTEM_COMMAND_FAILED),
		EMD(ERR_PM_PROC_OPEN_FAILED),
		EMD(ERR_PM_PROC_WITH_PID_NOT_FOUND),

		EMD(ERR_CONFIG_PINFO_NOT_FOUND),
		EMD(ERR_CONFIG_PGROUP_NOT_FOUND),
		EMD(ERR_CONFIG_PINFO_ALREADY_EXISTS),
		EMD(ERR_CONFIG_PINFO_UPDATE_SKIPPED),
		EMD(ERR_CONFIG_DISABLED),
		EMD(ERR_CONFIG_NOT_LOADED),
		EMD(ERR_CONFIG_PGROUP_EMPTY),

		EMD(ERR_PROC_XML_CONFIG_PARSER_INVALID_CONFIG_FILE),
		EMD(ERR_PROC_XML_CONFIG_PARSER_ROOT_NOT_FOUND),
		EMD(ERR_PROC_XML_CONFIG_PARSER_GROUPS_NOT_FOUND),
		EMD(ERR_PROC_XML_CONFIG_PARSER_PROCESS_NOT_FOUND),

		EMD(ERR_SERVER_XML_CONFIG_PARSER_INVALID_CONFIG_FILE),
		EMD(ERR_SERVER_XML_CONFIG_PARSER_ROOT_NOT_FOUND),

		EMD(ERR_CLIENT_XML_CONFIG_PARSER_INVALID_CONFIG_FILE),
		EMD(ERR_CLIENT_XML_CONFIG_PARSER_ROOT_NOT_FOUND),

		EMD(ERR_PDU_MAKE_PDU_FAILED),
		EMD(ERR_REQUEST_ACK_FAILED),
		EMD(ERR_NOT_IMPLEMENTED_ROUTINE),
		EMD(ERR_PROC_HANDLER_BUSY),

		EMD(ERR_APP_VERSION_MISMATCH),

};

string ErrorsDef::GetErrorMessage(ERR_ENUM _errorCode)
{

	auto res = _ErrorMap.find(_errorCode);
	if (res != _ErrorMap.end())
		return res->second;
	else
		return "Error code " + to_string(_errorCode)+" not defined.";
}